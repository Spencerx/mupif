This example illustrates the top level control script 
representing a simulation pipeline made of two simple applications. 

The overall simulation is performed in a time loop, 
where one application provides data for the second application,
which computes the arithmetical average value of given data.

The main difference to Example01 is that this example uses Pyro4
communication and thus the client and server parts can be executed on 
different computers.

Prerequisities:
---------------
Python (preferably Python 2.x) interpreter
Pyro module installed. To install Pyro, we reccomend to use pip: 
a tool for installing and managing Python packages:
> pip install Pyro4

There are two configuration files ../conf.py and ../conf_vpn.py. They need to be set up according
to your network.

Example02 supports three communication modes:
1) Local computer
2) SSH tunnel
3) VPN (Virtual private network) communication
The mode must be set up in server.py and Example02.py by a variable 'mode' in the preamble, e.g. mode = 1


Ad 1) Local computer
-----------------------
- Start pyro name server on local computer by executing tools/nameserver.py
The nameserver will listen on "127.0.0.1" locally, or should be set 
to your public IP adress. Note that in the later case, your firewall has to be configured to accept
connections at port 9090.
Your conf.py file must contain local IP address, i.e.
nshost = '127.0.0.1'
server = '127.0.0.1'

- Start server script $python server.py
By default, the server will listen on internal ip adress "127.0.0.1". If you want your server to listen
on your public IP adress, edit the conf.py script. Note that in the later case, your firewall has to be
configured to accept connections at port 44382.
Similarly, by default the nameserver is assumed to be accesible at IP adress '127.0.0.1'. To change
that, edit the conf.py script by modifying nshost variable.

- Run client script $python Example02.pt
By default, the nameserver is assumed to be accesible at IP adress '127.0.0.1'. To change that, edit
the conf.py script by modifying nshost variable.


Ad 2) SSH tunnel
----------------
SSH tunnel is estabilished between client and server, each of them located on different
or same computer. We need to estabilish network address translation (NAT) settings and port forwarding
configurations automatically.

- You need to set up conf.py to reflect your current settings, provide external (public) IP addresses on both machines. This means e.g. nshost = '147.32.130.71', server = '147.32.130.71'.

- Run Example02.pt. It gives you hint how to create a ssh tunnel externally, e.g.
*NIX: ssh -L 5555:machine1:44382 mmp@mech.fsv.cvut.cz
WIN: putty.exe -L 5555:machine1:44382 mmp@mech.fsv.cvut.cz -i C:\\Users\\whoever\\FIT-public-SSH2.ppk

- On a server side (e.g. mech.fsv.cvut.cz) run a nameserver $python tools/nameserver.py.

- On a server side (e.g. mech.fsv.cvut.cz) run $python server.py.

- On a client side run $python Example02.pt.



Ad 3) VPN communication
-----------------------
VPN ensures that nameserver, server and client are on a local-like network. 
You need to set up conf_vpn.py to reflect your current setting.

- First, you need to set up a virtual private network. This could be done by e.g. openVPN by issuing a command with root priviledges such as 
$openvpn mupif1.ovpn from a local computer.
This assigns a new address to a local computer on a virtual IP address (e.g. 172.30.0.6 as tun0-00) while assigning virtual address on remote computer such 172.30.0.1 on tun0-00 (e.g. mech.fsv.cvut.cz as a server). Then, all communication pretends to run on a local-like virtual network.

- On a server side (e.g. mech.fsv.cvut.cz) run a nameserver $python tools/nameserver-VPN.py.

- On a server side (e.g. mech.fsv.cvut.cz) run $python server.py.

- On a client side run $python Example02.pt.

